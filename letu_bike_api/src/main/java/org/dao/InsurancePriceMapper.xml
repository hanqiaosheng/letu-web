<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.dao.InsurancePriceMapper" >
  <resultMap id="BaseResultMap" type="org.entity.dto.InsurancePrice" >
    <id column="in_price_id" property="inPriceId" jdbcType="BIGINT" />
    <result column="in_price_name" property="inPriceName" jdbcType="VARCHAR" />
    <result column="in_update_time" property="inUpdateTime" jdbcType="TIMESTAMP" />
    <result column="in_price" property="inPrice" jdbcType="DECIMAL" />
    <result column="in_price_state" property="inPriceState" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    in_price_id, in_price_name, in_update_time, in_price, in_price_state
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.entity.dto.InsurancePriceExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from insurance_price
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from insurance_price
    where in_price_id = #{inPriceId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from insurance_price
    where in_price_id = #{inPriceId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.entity.dto.InsurancePriceExample" >
    delete from insurance_price
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.entity.dto.InsurancePrice" >
    insert into insurance_price (in_price_id, in_price_name, in_update_time, 
      in_price, in_price_state)
    values (#{inPriceId,jdbcType=BIGINT}, #{inPriceName,jdbcType=VARCHAR}, #{inUpdateTime,jdbcType=TIMESTAMP}, 
      #{inPrice,jdbcType=DECIMAL}, #{inPriceState,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.entity.dto.InsurancePrice" >
    insert into insurance_price
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="inPriceId != null" >
        in_price_id,
      </if>
      <if test="inPriceName != null" >
        in_price_name,
      </if>
      <if test="inUpdateTime != null" >
        in_update_time,
      </if>
      <if test="inPrice != null" >
        in_price,
      </if>
      <if test="inPriceState != null" >
        in_price_state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="inPriceId != null" >
        #{inPriceId,jdbcType=BIGINT},
      </if>
      <if test="inPriceName != null" >
        #{inPriceName,jdbcType=VARCHAR},
      </if>
      <if test="inUpdateTime != null" >
        #{inUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inPrice != null" >
        #{inPrice,jdbcType=DECIMAL},
      </if>
      <if test="inPriceState != null" >
        #{inPriceState,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.entity.dto.InsurancePriceExample" resultType="java.lang.Integer" >
    select count(*) from insurance_price
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update insurance_price
    <set >
      <if test="record.inPriceId != null" >
        in_price_id = #{record.inPriceId,jdbcType=BIGINT},
      </if>
      <if test="record.inPriceName != null" >
        in_price_name = #{record.inPriceName,jdbcType=VARCHAR},
      </if>
      <if test="record.inUpdateTime != null" >
        in_update_time = #{record.inUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.inPrice != null" >
        in_price = #{record.inPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.inPriceState != null" >
        in_price_state = #{record.inPriceState,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update insurance_price
    set in_price_id = #{record.inPriceId,jdbcType=BIGINT},
      in_price_name = #{record.inPriceName,jdbcType=VARCHAR},
      in_update_time = #{record.inUpdateTime,jdbcType=TIMESTAMP},
      in_price = #{record.inPrice,jdbcType=DECIMAL},
      in_price_state = #{record.inPriceState,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.entity.dto.InsurancePrice" >
    update insurance_price
    <set >
      <if test="inPriceName != null" >
        in_price_name = #{inPriceName,jdbcType=VARCHAR},
      </if>
      <if test="inUpdateTime != null" >
        in_update_time = #{inUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inPrice != null" >
        in_price = #{inPrice,jdbcType=DECIMAL},
      </if>
      <if test="inPriceState != null" >
        in_price_state = #{inPriceState,jdbcType=INTEGER},
      </if>
    </set>
    where in_price_id = #{inPriceId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.entity.dto.InsurancePrice" >
    update insurance_price
    set in_price_name = #{inPriceName,jdbcType=VARCHAR},
      in_update_time = #{inUpdateTime,jdbcType=TIMESTAMP},
      in_price = #{inPrice,jdbcType=DECIMAL},
      in_price_state = #{inPriceState,jdbcType=INTEGER}
    where in_price_id = #{inPriceId,jdbcType=BIGINT}
  </update>
</mapper>