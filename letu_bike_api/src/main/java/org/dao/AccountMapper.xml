<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.dao.AccountMapper" >
  <resultMap id="BaseResultMap" type="org.entity.dto.Account" >
    <id column="account_id" property="accountId" jdbcType="BIGINT" />
    <result column="account_user_id" property="accountUserId" jdbcType="BIGINT" />
    <result column="account_totalmoney" property="accountTotalmoney" jdbcType="DECIMAL" />
    <result column="account_deposit" property="accountDeposit" jdbcType="DECIMAL" />
    <result column="account_bbin" property="accountBbin" jdbcType="DECIMAL" />
    <result column="account_freezemoney" property="accountFreezemoney" jdbcType="DECIMAL" />
    <result column="account_available_balance" property="accountAvailableBalance" jdbcType="DECIMAL" />
    <result column="account_createtime" property="accountCreatetime" jdbcType="TIMESTAMP" />
    <result column="account_updatetime" property="accountUpdatetime" jdbcType="TIMESTAMP" />
    <result column="account_is_freeze" property="accountIsFreeze" jdbcType="INTEGER" />
    <result column="account_final_recharge_time" property="accountFinalRechargeTime" jdbcType="TIMESTAMP" />
    <result column="account_final_consume_time" property="accountFinalConsumeTime" jdbcType="TIMESTAMP" />
    <result column="account_final_refund_time" property="accountFinalRefundTime" jdbcType="TIMESTAMP" />
    <result column="account_give_money" property="accountGiveMoney" jdbcType="DECIMAL" />
  </resultMap>
  <resultMap id="BaseUnionResultMap" type="org.entity.dto.Account" extends="BaseResultMap">
  <association property="aUser" javaType="org.entity.dto.User">
    <id column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="user_account_id" property="userAccountId" jdbcType="BIGINT" />
    <result column="user_nickname" property="userNickname" jdbcType="VARCHAR" />
    <result column="user_tel" property="userTel" jdbcType="VARCHAR" />
    <result column="user_idcard" property="userIdcard" jdbcType="VARCHAR" />
    <result column="user_realname" property="userRealname" jdbcType="VARCHAR" />
    <result column="user_profile_image" property="userProfileImage" jdbcType="VARCHAR" />
    <result column="user_gender" property="userGender" jdbcType="INTEGER" />
    <result column="user_openId" property="userOpenid" jdbcType="VARCHAR" />
    <result column="user_unionId" property="userUnionid" jdbcType="VARCHAR" />
    <result column="user_state" property="userState" jdbcType="INTEGER" />
    <result column="user_createtime" property="userCreatetime" jdbcType="TIMESTAMP" />
    <result column="user_integral" property="userIntegral" jdbcType="INTEGER" />
    <result column="user_logintime" property="userLogintime" jdbcType="TIMESTAMP" />
    <result column="user_usetime" property="userUsetime" jdbcType="INTEGER" />
    <result column="user_use_distance" property="userUseDistance" jdbcType="INTEGER" />
    <result column="user_channel_id" property="userChannelId" jdbcType="BIGINT" />
    <result column="user_bike_id" property="userBikeId" jdbcType="BIGINT" />
    <result column="user_isblacklist" property="userIsblacklist" jdbcType="SMALLINT" />
    <result column="user_defriend_time" property="userDefriendTime" jdbcType="TIMESTAMP" />
  </association>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    account_id, account_user_id, account_totalmoney, account_deposit, account_bbin, account_freezemoney, 
    account_available_balance, account_createtime, account_updatetime, account_is_freeze, 
    account_final_recharge_time, account_final_consume_time, account_final_refund_time, 
    account_give_money
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.entity.dto.AccountExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from account
    where account_id = #{accountId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from account
    where account_id = #{accountId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.entity.dto.AccountExample" >
    delete from account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.entity.dto.Account" >
    insert into account (account_id, account_user_id, account_totalmoney, 
      account_deposit, account_bbin, account_freezemoney, 
      account_available_balance, account_createtime, 
      account_updatetime, account_is_freeze, account_final_recharge_time, 
      account_final_consume_time, account_final_refund_time, 
      account_give_money)
    values (#{accountId,jdbcType=BIGINT}, #{accountUserId,jdbcType=BIGINT}, #{accountTotalmoney,jdbcType=DECIMAL}, 
      #{accountDeposit,jdbcType=DECIMAL}, #{accountBbin,jdbcType=DECIMAL}, #{accountFreezemoney,jdbcType=DECIMAL}, 
      #{accountAvailableBalance,jdbcType=DECIMAL}, #{accountCreatetime,jdbcType=TIMESTAMP}, 
      #{accountUpdatetime,jdbcType=TIMESTAMP}, #{accountIsFreeze,jdbcType=INTEGER}, #{accountFinalRechargeTime,jdbcType=TIMESTAMP}, 
      #{accountFinalConsumeTime,jdbcType=TIMESTAMP}, #{accountFinalRefundTime,jdbcType=TIMESTAMP}), 
      #{accountGiveMoney,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective"  useGeneratedKeys="true" keyProperty="accountId" parameterType="org.entity.dto.Account" >
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="accountUserId != null" >
        account_user_id,
      </if>
      <if test="accountTotalmoney != null" >
        account_totalmoney,
      </if>
      <if test="accountDeposit != null" >
        account_deposit,
      </if>
      <if test="accountBbin != null" >
        account_bbin,
      </if>
      <if test="accountFreezemoney != null" >
        account_freezemoney,
      </if>
      <if test="accountAvailableBalance != null" >
        account_available_balance,
      </if>
      <if test="accountCreatetime != null" >
        account_createtime,
      </if>
      <if test="accountUpdatetime != null" >
        account_updatetime,
      </if>
      <if test="accountIsFreeze != null" >
        account_is_freeze,
      </if>
      <if test="accountFinalRechargeTime != null" >
        account_final_recharge_time,
      </if>
      <if test="accountFinalConsumeTime != null" >
        account_final_consume_time,
      </if>
      <if test="accountFinalRefundTime != null" >
        account_final_refund_time,
      </if>
      <if test="accountGiveMoney != null" >
        account_give_money,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="accountUserId != null" >
        #{accountUserId,jdbcType=BIGINT},
      </if>
      <if test="accountTotalmoney != null" >
        #{accountTotalmoney,jdbcType=DECIMAL},
      </if>
      <if test="accountDeposit != null" >
        #{accountDeposit,jdbcType=DECIMAL},
      </if>
      <if test="accountBbin != null" >
        #{accountBbin,jdbcType=DECIMAL},
      </if>
      <if test="accountFreezemoney != null" >
        #{accountFreezemoney,jdbcType=DECIMAL},
      </if>
      <if test="accountAvailableBalance != null" >
        #{accountAvailableBalance,jdbcType=DECIMAL},
      </if>
      <if test="accountCreatetime != null" >
        #{accountCreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountUpdatetime != null" >
        #{accountUpdatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountIsFreeze != null" >
        #{accountIsFreeze,jdbcType=INTEGER},
      </if>
      <if test="accountFinalRechargeTime != null" >
        #{accountFinalRechargeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountFinalConsumeTime != null" >
        #{accountFinalConsumeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountFinalRefundTime != null" >
        #{accountFinalRefundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountGiveMoney != null" >
        #{accountGiveMoney,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.entity.dto.AccountExample" resultType="java.lang.Integer" >
    select count(*) from account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update account
    <set >
      <if test="record.accountId != null" >
        account_id = #{record.accountId,jdbcType=BIGINT},
      </if>
      <if test="record.accountUserId != null" >
        account_user_id = #{record.accountUserId,jdbcType=BIGINT},
      </if>
      <if test="record.accountTotalmoney != null" >
        account_totalmoney = #{record.accountTotalmoney,jdbcType=DECIMAL},
      </if>
      <if test="record.accountDeposit != null" >
        account_deposit = #{record.accountDeposit,jdbcType=DECIMAL},
      </if>
      <if test="record.accountBbin != null" >
        account_bbin = #{record.accountBbin,jdbcType=DECIMAL},
      </if>
      <if test="record.accountFreezemoney != null" >
        account_freezemoney = #{record.accountFreezemoney,jdbcType=DECIMAL},
      </if>
      <if test="record.accountAvailableBalance != null" >
        account_available_balance = #{record.accountAvailableBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.accountCreatetime != null" >
        account_createtime = #{record.accountCreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.accountUpdatetime != null" >
        account_updatetime = #{record.accountUpdatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.accountIsFreeze != null" >
        account_is_freeze = #{record.accountIsFreeze,jdbcType=INTEGER},
      </if>
      <if test="record.accountFinalRechargeTime != null" >
        account_final_recharge_time = #{record.accountFinalRechargeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.accountFinalConsumeTime != null" >
        account_final_consume_time = #{record.accountFinalConsumeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.accountFinalRefundTime != null" >
        account_final_refund_time = #{record.accountFinalRefundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.accountGiveMoney != null" >
        account_give_money = #{record.accountGiveMoney,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update account
    set account_id = #{record.accountId,jdbcType=BIGINT},
      account_user_id = #{record.accountUserId,jdbcType=BIGINT},
      account_totalmoney = #{record.accountTotalmoney,jdbcType=DECIMAL},
      account_deposit = #{record.accountDeposit,jdbcType=DECIMAL},
      account_bbin = #{record.accountBbin,jdbcType=DECIMAL},
      account_freezemoney = #{record.accountFreezemoney,jdbcType=DECIMAL},
      account_available_balance = #{record.accountAvailableBalance,jdbcType=DECIMAL},
      account_createtime = #{record.accountCreatetime,jdbcType=TIMESTAMP},
      account_updatetime = #{record.accountUpdatetime,jdbcType=TIMESTAMP},
      account_is_freeze = #{record.accountIsFreeze,jdbcType=INTEGER},
      account_final_recharge_time = #{record.accountFinalRechargeTime,jdbcType=TIMESTAMP},
      account_final_consume_time = #{record.accountFinalConsumeTime,jdbcType=TIMESTAMP},
      account_final_refund_time = #{record.accountFinalRefundTime,jdbcType=TIMESTAMP},
      account_give_money = #{record.accountGiveMoney,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.entity.dto.Account" >
    update account
    <set >
      <if test="accountUserId != null" >
        account_user_id = #{accountUserId,jdbcType=BIGINT},
      </if>
      <if test="accountTotalmoney != null" >
        account_totalmoney = #{accountTotalmoney,jdbcType=DECIMAL},
      </if>
      <if test="accountDeposit != null" >
        account_deposit = #{accountDeposit,jdbcType=DECIMAL},
      </if>
      <if test="accountBbin != null" >
        account_bbin = #{accountBbin,jdbcType=DECIMAL},
      </if>
      <if test="accountFreezemoney != null" >
        account_freezemoney = #{accountFreezemoney,jdbcType=DECIMAL},
      </if>
      <if test="accountAvailableBalance != null" >
        account_available_balance = #{accountAvailableBalance,jdbcType=DECIMAL},
      </if>
      <if test="accountCreatetime != null" >
        account_createtime = #{accountCreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountUpdatetime != null" >
        account_updatetime = #{accountUpdatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountIsFreeze != null" >
        account_is_freeze = #{accountIsFreeze,jdbcType=INTEGER},
      </if>
      <if test="accountFinalRechargeTime != null" >
        account_final_recharge_time = #{accountFinalRechargeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountFinalConsumeTime != null" >
        account_final_consume_time = #{accountFinalConsumeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountFinalRefundTime != null" >
        account_final_refund_time = #{accountFinalRefundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="accountGiveMoney != null" >
        account_give_money = #{accountGiveMoney,jdbcType=DECIMAL},
      </if>
    </set>
    where account_id = #{accountId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.entity.dto.Account" >
    update account
    set account_user_id = #{accountUserId,jdbcType=BIGINT},
      account_totalmoney = #{accountTotalmoney,jdbcType=DECIMAL},
      account_deposit = #{accountDeposit,jdbcType=DECIMAL},
      account_bbin = #{accountBbin,jdbcType=DECIMAL},
      account_freezemoney = #{accountFreezemoney,jdbcType=DECIMAL},
      account_available_balance = #{accountAvailableBalance,jdbcType=DECIMAL},
      account_createtime = #{accountCreatetime,jdbcType=TIMESTAMP},
      account_updatetime = #{accountUpdatetime,jdbcType=TIMESTAMP},
      account_is_freeze = #{accountIsFreeze,jdbcType=INTEGER},
      account_final_recharge_time = #{accountFinalRechargeTime,jdbcType=TIMESTAMP},
      account_final_consume_time = #{accountFinalConsumeTime,jdbcType=TIMESTAMP},
      account_final_refund_time = #{accountFinalRefundTime,jdbcType=TIMESTAMP},
      account_give_money = #{accountGiveMoney,jdbcType=DECIMAL}
    where account_id = #{accountId,jdbcType=BIGINT}
  </update>
  
  <select id="selectUnionByExample" resultMap="BaseUnionResultMap" parameterType="org.entity.dto.AccountExample" >
    select * from account a left join user u on a.account_user_id = u.user_id
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  
  <select id="countUnionByExample" parameterType="org.entity.dto.AccountExample" resultType="java.lang.Integer" >
    select count(*) from account a left join user u on a.account_user_id = u.user_id
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
</mapper>