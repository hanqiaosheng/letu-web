<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:redis="http://www.springframework.org/schema/redis"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/redis
			http://www.springframework.org/schema/redis/spring-redis.xsd">
    <description>spring-data-redis配置</description>
    
	<!--注解说明 !!单元测试时候使用 配置了包扫描之后，<context annotation-config />就可以移除了。 -->
	<!--<context:annotation-config /> -->
	
	
	<bean id="redisConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis_host}"></property>
        <property name="port" value="${redis_port}"></property>
        <property name="password" value="${redis_password}"></property>
        <property name="usePool" value="true"></property>
    </bean>
	
	<!-- Jedis链接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 如果为true，表示有一个idle object evitor线程对idle object进行扫描，如果validate失败， 此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义 -->
		<property name="testWhileIdle" value="true" />
		<!-- 在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的 -->
		<property name="testOnBorrow" value="true" />
		<!-- 表示一个对象至少停留在idle状态的最短时间，然后才能被idle -->
		<property name="minEvictableIdleTimeMillis" value="60000" />
		<!-- 表示idle object evitor两次扫描之间要sleep的毫秒数； -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<!-- 表示idle object evitor每次扫描的最多的对象数； -->
		<property name="numTestsPerEvictionRun" value="-1" />
		<!-- 控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制 -->
		<property name="maxTotal" value="30" />
		<!-- 控制一个pool最多有多少个状态为idle的jedis实例； -->
		<property name="maxIdle" value="8" />
		<!-- 控制一个pool最少有多少个状态为idle的jedis实例； -->
		<property name="minIdle" value="0" />
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis_host}"/>
        <constructor-arg index="2" value="${redis_port}" type="int" />
        <constructor-arg index="3" value="6000" type="int" />
        <constructor-arg index="4" value="${redis_password}"/>
    </bean>
	
	 <!--创建redis模板-->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory"></property>
	</bean>

	<!-- 序列化：一般我们向Redis发送一个消息定义的Java对象，这个对象需要序列化。这里使用JdkSerializationRedisSerializer： -->
	<bean id="jdkSerializer"
		class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
	<!-- 发送者 -->
	<bean id="sendMessage" class="org.util.redis.SendMessage">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>
	
	<!--消息监听处理类-->
    <bean id="messageDelegateListener" class="org.util.redis.ListenMessage"/>

	<!-- 监听者 -->
	<!-- 消息监听器 -->
	<bean id="messageListener" class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
        <property name="delegate" ref="messageDelegateListener"/>
        <property name="serializer" ref="jdkSerializer" />
    </bean>
    
	<!-- 定义消息监听，method：监听消息执行的方法，serializer：序列化，topic：监听主题（可以理解为队列名称） -->
    <redis:listener-container>
        <!--指定消息处理方法，序列化方式及主题名称-->
        <redis:listener ref="messageListener" method="handleMessage" serializer="jdkSerializer" topic="java"/>
    </redis:listener-container>
    
    <!-- redis服务封装 -->
	<bean id="redisService" class="org.util.redis.RedisService" />
	<!-- <bean id="jedisConnectionFactory" -->
	<!-- class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" -->
	<!-- p:host-name="121.42.201.254" -->
	<!-- p:port="6379" -->
	<!-- p:password="zuccer" -->
	<!-- p:pool-config-ref="jedisPoolConfig" /> -->

	<!-- 集群 -->
	<!-- bean id="jedisCluster" class="org.util.redis.JedisClusterFactory"> 
		<property name="addressConfig"> <value>classpath:redis.properties</value> 
		</property> <property name="addressKeyPrefix" value="address" /> 属性文件里 key的前缀 
		<property name="timeout" value="300000" /> <property name="maxRedirections" 
		value="6" /> <property name="genericObjectPoolConfig" ref="genericObjectPoolConfig" 
		/> </bean> -->
	<!-- <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"> -->
	<!-- <constructor-arg index="0" ref="jedisPoolConfig" /> -->
	<!-- <constructor-arg index="1"> -->
	<!-- <list> -->
	<!-- <bean class="redis.clients.jedis.JedisShardInfo"> -->
	<!-- <constructor-arg index="0" value="${redis.host}" /> -->
	<!-- <constructor-arg index="1" value="${redis.port}" type="int" /> -->
	<!-- <property name="password" value="${redis.password}"></property> -->
	<!-- </bean> -->
	<!-- </list> -->
	<!-- </constructor-arg> -->
	<!-- </bean> -->
		<!-- redis模板 -->
	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"> -->
	<!-- <property name="connectionFactory" ref="jedisConnectionFactory" /> -->
	<!-- </bean> -->
		<!-- redis模板 -->
	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"> -->
	<!-- <property name="connectionFactory" ref="jedisConnectionFactory" /> -->
	<!-- </bean> -->
</beans>			   